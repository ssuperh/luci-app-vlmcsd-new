#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2011 OpenWrt.org

START=99
USE_PROCD=1

PROG=/usr/bin/vlmcsd
CONF=vlmcsd

. /lib/functions/network.sh

append_listen() {
    echo $@ | xargs -rn1 >> $inifile echo Listen =
}

parse_iface() {
    local ips

    while [ -n "$1" ];do
        if [ -z "$family" -o "$family" = "ipv4" ];then
            network_get_ipaddrs ips "$1"
            append_listen $ips
        fi
        if [ -z "$family" -o "$family" = "ipv6" ];then
            network_get_ipaddrs6 ips "$1"
            append_listen $ips
        fi
        shift
    done
}

listen_all() {
    if [ -z "$family" -o "$family" = "ipv4" ];then
        append_listen '0.0.0.0'
    fi
    if [ -z "$family" -o "$family" = "ipv6" ];then
        append_listen '[::]'
    fi
}

remove_srvhost() {
    local section=$1
    [ "${section%%_*}" = "vlmcsd" ] && uci_remove dhcp "$section"
}

add_srvhost() {
    local host="$1" port="$2" section="vlmcsd_$3"

    uci -q batch <<EOF
        set dhcp.$section='srvhost'
        set dhcp.$section.class='0'
        set dhcp.$section.weight='0'
        set dhcp.$section.srv="_vlmcs._tcp"
        set dhcp.$section.target="$host"
        set dhcp.$section.port="$port"
EOF
}

dnsmasq_reload() {
    local port listen ifaces
    local hostname=$(uci -q get system.@system[0].hostname)
    local seq=1

    config_get port vlmcsd Port
    config_get listen vlmcsd Listen
    config_get ifaces global Interface

    config_load dhcp
    config_foreach remove_srvhost srvhost
    port=${port:-1688}

    local iface ips ip
    if [ -n "$listen" ];then
        add_srvhost "$hostname" "$port" "$seq"
    elif [ -z "$ifaces" ];then
        if [ -z "$family" ];then
            add_srvhost "$hostname" "$port" "$seq"
        else
            local ip_pattern='\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'

            ips=$(nslookup $hostname 2>/dev/null | sed -rn 's/^Address \d+: (.*)$/\1/p')
            for ip in $ips;do
                [ "$family" = "ipv4" ] && \
                    ip=$(echo $ip | sed -rn "s/^(${ip_pattern})$/\1/p") || \
                    ip=$(echo $ip | sed -r "/^${ip_pattern}$/d")
                [ -z "$ip" ] && continue
                add_srvhost "$ip" "$port" "$seq"
                seq=$(($seq + 1))
            done
        fi
    else
        local ip4 ip6
        for iface in $ifaces;do
            [ -z "$family" -o "$family" = "ipv4" ] && \
                network_get_ipaddrs ip4 "$iface"
            [ -z "$family" -o "$family" = "ipv6" ] && \
                network_get_ipaddrs6 ip6 "$iface"

            for ip in $ip4 $ip6;do
                add_srvhost "$ip" "$port" "$seq"
                seq=$(($seq + 1))
            done
        done
    fi
    uci_commit dhcp

    /etc/init.d/dnsmasq reload
}

start_service() {
    local inifile=/var/etc/vlmcsd.ini
    local value family

    config_load $CONF
    config_get_bool value global enable
    [ "$value" = "0" ] && return 0

    mkdir -p $(dirname $inifile)
    
    echo -n > $inifile
    config_get family global family
    config_get value vlmcsd Port
    [ -n "$value" ] && echo "Port = $value" >> $inifile
    
    config_get value vlmcsd Listen
    if [ -n "$value" ];then
        append_listen $value
    else
        config_get value global Interface
        [ -n "$value" ] && parse_iface $value || listen_all
    fi
    
    config_get value vlmcsd PublicIPProtectionLevel
    [ -n "$value" ] && echo "PublicIPProtectionLevel = $value" >> $inifile
    config_get_bool value vlmcsd FreeBind
    [ "$value" = "1" ] && echo "FreeBind = true" >> $inifile
    config_get value vlmcsd RandomizationLevel
    [ -n "$value" ] && echo "RandomizationLevel = $value" >> $inifile
    config_get value vlmcsd HostBuild
    [ -n "$value" ] && echo "HostBuild = $value" >> $inifile
    config_get value vlmcsd LCID
    [ -n "$value" ] && echo "LCID = $value" >> $inifile
    config_get value vlmcsd MaxWorkers
    [ -n "$value" ] && echo "MaxWorkers = $value" >> $inifile
    config_get value vlmcsd ConnectionTimeout
    [ -n "$value" ] && echo "ConnectionTimeout = $value" >> $inifile
    config_get_bool value vlmcsd DisconnectClientsImmediately
    [ "$value" = "1" ] && echo "DisconnectClientsImmediately = yes" >> $inifile
    config_get value vlmcsd PidFile
    [ -n "$value" ] && echo "PidFile = $value" >> $inifile
    config_get value vlmcsd KmsData
    [ -n "$value" ] && echo "KmsData = $value" >> $inifile
    config_get value vlmcsd LogFile
    [ -n "$value" ] && echo "LogFile = $value" >> $inifile
    config_get_bool value vlmcsd LogDateAndTime
    [ "$value" = "0" ] && echo "LogDateAndTime = false" >> $inifile
    config_get_bool value vlmcsd LogVerbose
    [ "$value" = "1" ] && echo "LogVerbose = true" >> $inifile
    config_get value vlmcsd WhiteListingLevel
    [ -n "$value" ] && echo "WhiteListingLevel = $value" >> $inifile
    config_get_bool value vlmcsd CheckClientTime
    [ "$value" = "1" ] && echo "CheckClientTime = true" >> $inifile
    config_get_bool value vlmcsd MaintainClients
    [ "$value" = "1" ] && echo "MaintainClients = true" >> $inifile
    config_get_bool value vlmcsd StartEmpty
    [ "$value" = "1" ] && echo "StartEmpty = true" >> $inifile
    config_get value vlmcsd ActivationInterval
    [ -n "$value" ] && echo "ActivationInterval = $value" >> $inifile
    config_get value vlmcsd RenewalInterval
    [ -n "$value" ] && echo "RenewalInterval = $value" >> $inifile
    config_get value vlmcsd ExitLevel
    [ -n "$value" ] && echo "ExitLevel = $value" >> $inifile
    config_get value vlmcsd user
    [ -n "$value" ] && echo "group = $value" >> $inifile
    config_get value vlmcsd user
    [ -n "$value" ] && echo "group = $value" >> $inifile
    config_get_bool value vlmcsd UseNDR64
    [ "$value" = "0" ] && echo "UseNDR64 = false" >> $inifile
    config_get_bool value vlmcsd UseBTFN
    [ "$value" = "0" ] && echo "UseBTFN = false" >> $inifile

    procd_open_instance
    procd_set_param command $PROG -D -i $inifile
    procd_set_param file $inifile
    procd_set_param respawn
    procd_close_instance

    dnsmasq_reload
}

service_triggers() {
	procd_add_reload_trigger "vlmcsd" "dhcp" "system"
}
